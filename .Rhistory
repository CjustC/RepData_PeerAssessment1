remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x), c(8, 4, 0))
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[3]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram(funtion)
telegram(arg1 = "This is a Telegram")
submit()
submit()
submit()
madlibs(place = "Boulder", adjective = "inquisitive", noun = "bike shop")
mad_libs(place = "Boulder", adjective = "inquisitive", noun = "bike shop")
submit()
submit()
submit()
submit()
submit()
submit()
'I', %p%, 'love', 'R!'
'I', %p%, 'love', %p%, 'R!'
paste('I', %p%, 'love', %p%, 'R!')
'I' %p% 'love' %p% 'R!'
library(swril)
library(swirl)
swirl()
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6,))
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
unique_vals <- lapply(flags, unique)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
library(swirl)
ls()
rm(list=ls())
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, characer(1))
vapply(flags, class, characetr(1))
vapply(flags, class, characeter(1))
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flas$animate, flags$landmass, mean)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0,7)
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbiniom(100, prob = 0.7)
flips2 <- rbinom(100, prob = 0.7)
flips2 <- rbinom(100, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
?rpois
rpois(5, 10)
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
library(swirl)
swirl()
d1 <- Sys.Date
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
v2 <- 1969-01-01
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
unclass(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "Octber 17, 1986 08:24"
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
ls
ls()
library(swirl)
ls()
rm(list = ls())
ls()
library(swril)
library(swirl)
C
(swirl)
swirl()
3
swirl()
install_from_swirl("Exploratory_Data_Analysis")
Exploratory graphics
0
0
0
exit
by
bye
swirl()
head(pollution)
dim(pollution)
summary(pollution, pollution$pm25)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col = "blue")
abline(h = 12)
hist(ppm, col = "green")
rug(ppm)
low
high
hist(ppm, col = "green", break = 100)
hist(ppm, col = "green", 100)
rug(ppm)
hist(ppm, col = "green")
abline(v = 12)
abline(v = 12, lwd=2)
abline(v = median(ppm), col = "magenta" lwd=4)
abline(v = median(ppm), col = "magenta", lwd=4)
names(pollution)
table(pollution$region)
reg <- table(pollution$region)
reg
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(pollution, y ~x, col = "red")
boxplot(pm25 ~ region, data = pollution, col = "red")
par(mfrow = c(2, 1), mar = c(4,4,2,1))
east <- subset(pollution, region == "east")
head(east)
hist(pm25)
hist(pm25, col = "green")
hist(east$pm25, col = "green")
hist(west$pm25, col = "green")
hist(subset(pollution,region=="west")$pm25, col = "green")
with(pollution, plot(latitude, pm25))
abline(h = 12)
abline(h = 12, lwd = 2, lty = 2)
plot(pllution$latitude, ppm, col = pollution$region)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h = 12, lwd = 2, lty = 2)
par(mfrow = c(1,2), mar = c(5,4,2,1))
west <- subset(pollution, region = "west")
west <- subset(pollution,region=="west")
plot(wes$latitude ~ west$pm25, main = "West")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "East")
library(swirl)
swirl()
?Devices
(fatihful, plot(eruptions, waiting))
with(fatihful, plot(eruptions, waiting))
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser")
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file = "myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2, 2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data = mpg)
library(swirl)
swirl()
swirl()
swirl()
head(airquality)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone ~ Month, airquality)
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppd)", col.axis = blue, col.lab = red)
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppd)", col.axis = "blue", col.lab = "red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)",col.axis="blue",col.lab="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)",col.axis="blue",col.lab="red", main = "Ozone and Wind in New York City")
title(main="Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
with(airquality, plot(Wind, Ozone), main = "Ozone and Wind in New York City")
title(main="Ozone and Wind in New York City")
par(length())
par(length(Wind, Ozone))
length(par())
names(par())
?par
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, set = "n")
plot(airquality$Wind, type="n",airquality$Ozone)
title(main = "Wind and Ozone in NYC")
may = 5
may <- subset(airquality, month == 5)
may <- subset(airquality, Month==5)
points(wind, ozone, pch = 3, col = "blue" )
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay <- subset(airquality)
notmay <- subset(airquality, Month != 5)
points(notmay$Wind, notmay$Ozone, col = "red", pch = 8)
legend("topright", pch = , col = "blue", "red", legend = "May, "Other Months"))
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months"))
abline(v=median(airquality$Wind),lty=2,lwd=2)
par(mfrow = c(1,2))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar, main = "Ozone and Solar Radiation")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1,3), mar = c(4,4,2,1), oma = c(0,0,2,0))
plot(airquality$Wind, airquality$Ozone, title(main = "Ozone and Wind"))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", oma = TRUE)
mtext("Ozone and Weather in New York City", outer = TRUE)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
install.packages("ggplot2")
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
head(BodyWeight)
table(BodyWeight$Diet)
library(lattice)
install.packages("lattice")
library(lattice)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
plot(p)
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
install.packages("Hmisc")
install.packages("maptools")
Library(swirl)
Library("swirl")
swirl
library(swirl)
C
swirl()
library(swirl)
C
swirl()
head(airquality)
xyplot(Ozone ~ Wind, data = airquality)
xyplot(Ozone ~ Wind, data = airquality, col = "red", pch = 8, main = "Big Apple Data")
xyplot(Ozone ~ Wind | as.factor(Month), data = airquality, layout = c(5,1))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5,1))
o <- xyplot(Ozone ~ Wind, data = airquality)
p <- xyplot(Ozone ~ Wind, data = airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[[x.limits]]
p[["x.limits""]]
p[["x.limits"]]
table(f)
xyplot(y ~ x | f, layout = c(2, 1))
v1
v2
myedit("plot1.R")
source(pathtofile("plot.R"), local = TRUE)
source(pathtofile("plot1.R"),local=TRUE)
myedit("plot2.R")
source('/Library/Frameworks/R.framework/Versions/3.2/Resources/library/swirl/Courses/Exploratory_Data_Analysis/Lattice_Plotting_System//plot2.R')
source("plot2.R")
source(pathtofile("plot2.R"),local=TRUE)
str(diamonds)
table(diamond$color)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"), local = TRUE)
xyplot(price ~ carat |color * cut, data = diamonds, strip = FALSE, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
xyplot(price ~ carat |color * cut, data = diamonds, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
sample(colors(), 10)
pal <- colorRan
pal <- colorRamp(c("red", "blue"))
pal(0)
pal(1)
pal(seq(0, 1, len=6))
p1 <- colorRampPalette(c("red, "blue""))
p1 <- colorRampPalette(c("red, "blue"))
p1 <- colorRampPalette(c("red","blue"))
p1(2)
p1(6)
0xcc
p2 <- colorRampPalette("red", "yellow")
p2 <- colorRampPalette(c("red","yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?fun
?rgb
p3 <- colorRampPalette(c("blue", "green"), alpha = .5)
p3(5)
plot(x, y, pch = 19, col = rgb(0, .5, .5))
plot(x, y, pch = 19, col = rgb(0, .5, .5, .3))
cols <- brewer.pal(3, "BuGn")
showMe(cols)
pal<- colorRampPalette(cols)
pal(20)
showMe(pal(20))
image(volcano, col = pal(20))
image(volcano, col = pa1(20))
image(volcano, col = p1(20))
library(knitr)
opts_chunk$set(echo = TRUE, results = 'hold')
library(data.table)
library(ggplot2)
setwd("~/DataScience/ReproducibleResearch")
setwd("~/DataScience/RepData_PeerAssessment1")
library(knitr)
opts_chunk$set(echo = TRUE, results = 'hold')
library(data.table)
library(ggplot2)
library(plyr)
library(stats)
library(VIM)
library(mice)
data <- fread("activity.csv") # 'fread' reads data in quickly
data$date <- as.Date(data$date)
str(data)
stepsPerDay <- data.table(aggregate(data$steps, by = list(data$date), FUN = sum))
names(stepsPerDay) <- c("date", "steps")
head(stepsPerDay)
ggplot(stepsPerDay, aes(x = steps)) +
geom_histogram(fill = "light green", color = "white", binwidth = 700) +
labs(title = "Total Steps Taken per Day", x = "Number of Steps per Day", y = "Frequency") +
theme_bw() +
geom_vline(aes(xintercept = mean(steps, na.rm = TRUE)), linetype = "dashed", color = "blue", size = 0.5)
stepsMean <- mean(stepsPerDay$steps, na.rm = TRUE)
stepsMedian <- median(stepsPerDay$steps, na.rm = TRUE)
stepsInterval <- data.table(aggregate(data$steps, by = list(data$interval), FUN = mean, na.rm = TRUE))
names(stepsInterval) <- c("interval", "meanSteps")
ggplot(stepsInterval, aes(x = interval)) +
geom_line(color = "blue", aes(y = meanSteps)) +
labs(title = "Average Daily Activity Pattern", x = "Interval", y = "Average number of Steps") +
theme_bw()
max_interval <- stepsInterval[which.max(stepsInterval$meanSteps),]
missVals <- sum(is.na(data$steps))
dataCompl <- data[complete.cases(data)]
md.pattern(data)
missingVals <- aggr(data) # this function also produces plots for comparision
missingVals # confirm the number of missing values
aggr_plot <- aggr(data, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(data), cex.axis=.7, gap=3, ylab=c("Histogram of missing data","Pattern"))
compData <- merge(data, stepsInterval, by = "interval", all.y = FALSE)
compData$steps[is.na(compData$steps)] <- as.integer(round(compData$meanSteps[is.na(compData$steps)]))
compData <- compData[order(compData$date, compData$interval)]
compData$meanSteps <- NULL # drop column
head(compData) # check data
newStepsPerDay <- data.table(aggregate(compData$steps, by = list(compData$date),
FUN = sum))
names(newStepsPerDay) <- c("date", "sumSteps")
head(newStepsPerDay)
ggplot(newStepsPerDay, aes(x = sumSteps)) +
geom_histogram(fill = "pink", binwidth = 700) +
labs(title="Histogram of Steps Taken per Day", x = "Number of Steps per Day", y = "Frequency") +
geom_vline(aes(xintercept = mean(sumSteps, na.rm = TRUE)), linetype = "dashed", color = "blue", size = 0.5) +
theme_bw()
newStepsMean <- mean(newStepsPerDay$sumSteps, na.rm = TRUE)
newStepsMedian <- median(newStepsPerDay$sumSteps, na.rm = TRUE)
compData$day <- as.factor(weekdays(compData$date))
dayType <- function(day) {
if ((day) %in% c("Saturday", "Sunday")) {
"weekend"
} else {
"weekday"
}
}
compData$dayType <- as.factor(sapply(compData$day, dayType))
StepsPerDayComplete <- ddply(compData, c("interval", "dayType"), summarise,
mean = round(mean(steps)))
ggplot(StepsPerDayComplete, aes(x=interval, y=mean)) +
geom_line(aes(group = dayType, colour=dayType)) +
facet_wrap( ~ dayType, ncol=1) +
labs(x = "Interval", y = "Number of steps") +
theme_bw() +
theme(legend.position="none")
knit2html()
knit2html(PA1_template)
?knit2html
rem(list(ls()))
rm(list(ls()))
setwd("~/DataScience/RepData_PeerAssessment1")
library(knitr)
opts_chunk$set(echo = TRUE, results = 'hold')
library(data.table)
library(ggplot2)
library(plyr)
library(stats)
library(VIM)
library(mice)
data$date <- as.Date(data$date)
